# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

# Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
# Square      P4,n=n2     1, 4, 9, 16, 25, ...
# Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
# Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
# Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
# Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

# The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, 
# square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


import time
from termcolor import colored
import itertools


triangle = []
square = []
pentagonal = []
hexagonal = []
heptagonal = []
octagonal = []

def triangleF(n):
    return n * (n + 1) // 2
def squareF(n):
    return n * n
def pentagonalF(n):
    return n * (3 * n - 1) // 2
def hexagonalF(n):
    return n * (2 * n - 1)
def heptagonalF(n):
    return n * (5 * n - 3) // 2
def octagonalF(n):
    return n * (3 * n - 2)

def isCyc(n,m):
    if ( n%m == int(m/100)):
        return True
    else:
        return False

def find_cyclicals(haystack, needle):
    cyclicals = []
    for item in haystack:
        if isCyc(needle, item):
            cyclicals.append(item)
    return cyclicals

def main_process():
    for i in range(45, 140+1):
        triangle.append(triangleF(i))

    for i in range(32, 99+1):
        square.append(squareF(i))

    for i in range(26, 81+1):
        pentagonal.append(pentagonalF(i))

    for i in range(23, 70+1):
        hexagonal.append(hexagonalF(i))

    for i in range(21, 63+1):
        heptagonal.append(heptagonalF(i))

    for i in range(19, 58+1):
        octagonal.append(octagonalF(i))

    shapes = [triangle, square, pentagonal, hexagonal, heptagonal, octagonal]
    # print(shapes)
    for i in shapes:
        print(len(i))
    


    print(colored('mycount=', 'red'), 'results')

if __name__ == "__main__":
    tic = time.clock()
    
    main_process()

    toc = time.clock()
    print("time=",toc - tic)