// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "measurement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Measurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Measurement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_measurement_2eproto() {
  protobuf_AddDesc_measurement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "measurement.proto");
  GOOGLE_CHECK(file != NULL);
  Measurement_descriptor_ = file->message_type(0);
  static const int Measurement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, side_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, side_b_),
  };
  Measurement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Measurement_descriptor_,
      Measurement::default_instance_,
      Measurement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Measurement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_measurement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Measurement_descriptor_, &Measurement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_measurement_2eproto() {
  delete Measurement::default_instance_;
  delete Measurement_reflection_;
}

void protobuf_AddDesc_measurement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021measurement.proto\"<\n\013Measurement\022\r\n\005im"
    "age\030\001 \001(\014\022\016\n\006side_a\030\002 \001(\010\022\016\n\006side_b\030\003 \001("
    "\010", 81);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "measurement.proto", &protobuf_RegisterTypes);
  Measurement::default_instance_ = new Measurement();
  Measurement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_measurement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_measurement_2eproto {
  StaticDescriptorInitializer_measurement_2eproto() {
    protobuf_AddDesc_measurement_2eproto();
  }
} static_descriptor_initializer_measurement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Measurement::kImageFieldNumber;
const int Measurement::kSideAFieldNumber;
const int Measurement::kSideBFieldNumber;
#endif  // !_MSC_VER

Measurement::Measurement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Measurement)
}

void Measurement::InitAsDefaultInstance() {
}

Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Measurement)
}

void Measurement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_a_ = false;
  side_b_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void Measurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Measurement_descriptor_;
}

const Measurement& Measurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_measurement_2eproto();
  return *default_instance_;
}

Measurement* Measurement::default_instance_ = NULL;

Measurement* Measurement::New() const {
  return new Measurement;
}

void Measurement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Measurement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(side_a_, side_b_);
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Measurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_side_a;
        break;
      }

      // optional bool side_a = 2;
      case 2: {
        if (tag == 16) {
         parse_side_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &side_a_)));
          set_has_side_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_side_b;
        break;
      }

      // optional bool side_b = 3;
      case 3: {
        if (tag == 24) {
         parse_side_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &side_b_)));
          set_has_side_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Measurement)
  return false;
#undef DO_
}

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Measurement)
  // optional bytes image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // optional bool side_a = 2;
  if (has_side_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->side_a(), output);
  }

  // optional bool side_b = 3;
  if (has_side_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->side_b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Measurement)
}

::google::protobuf::uint8* Measurement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Measurement)
  // optional bytes image = 1;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // optional bool side_a = 2;
  if (has_side_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->side_a(), target);
  }

  // optional bool side_b = 3;
  if (has_side_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->side_b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Measurement)
  return target;
}

int Measurement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }

    // optional bool side_a = 2;
    if (has_side_a()) {
      total_size += 1 + 1;
    }

    // optional bool side_b = 3;
    if (has_side_b()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Measurement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Measurement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_side_a()) {
      set_side_a(from.side_a());
    }
    if (from.has_side_b()) {
      set_side_b(from.side_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {

  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(side_a_, other->side_a_);
    std::swap(side_b_, other->side_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Measurement_descriptor_;
  metadata.reflection = Measurement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
